<?php

include_once("{$_SERVER['DOCUMENT_ROOT']}/git/cms/classes/Database.php");

class Section {

    private $name;
    private $id;
    private $displayName;
    private $pageName;
    private $pageId;
    private $database;

    // probably will need page getters and setters because a section's field's content is tailed to a page,
    // but a section can be used on any page.

    public function __construct($name) {
        $this->database = new Database();
        $this->setName($name);
    }

    public function getName() {
        return $this->name;
    }
    
    // a section's identity is temporarily bounded by its name until it's found in the database,
    // where it will then be permamently bound by its id.
    public function setName($name) {
        // Check if the name is in the database
        $query = "SELECT name, id FROM sections WHERE name = ?";

        $statement = $this->database->getConnection()->prepare($query);
        $statement->bind_param("s", $name);
        $statement->execute();

        $result = $statement->get_result();

        // If the name is in the database
        if ($result->num_rows > 0) {
            // Fetch id and name
            $section = $result->fetch_assoc();
            $this->id = $section["id"];
            $this->name = $section["name"];
        } else { // The name is not in the database
            // Add new name into the database
            $query = "INSERT INTO sections (name) VALUES (?)";

            $statement = $this->database->getConnection()->prepare($query);
            $statement->bind_param("s", $name);
            $statement->execute();

            // Fetch id and name
            $this->id = $this->database->getConnection()->insert_id;
            $this->name = $name;
        }
    }

    // the functionality of this method will most likely change when the Page class can fetch its own id
    public function setPage($page) {
        $this->pageName = $page->getName();

        // Check if the page is in the database
        $query = "SELECT id FROM pages WHERE name = ?";

        $statement = $this->database->getConnection()->prepare($query);
        $statement->bind_param("s", $this->pageName);
        $statement->execute();

        $result = $statement->get_result();

        // If the page is in the database
        if ($result->num_rows > 0) {
            // Fetch id
            $page = $result->fetch_assoc();
            $this->pageId = $page["id"];
        } else { // The page is not in the database
            // The page id does not exist.
            $this->pageId = null;
        }
    }

    public function getPageId() {
        return $this->pageId;
    }

    public function getPageName() {
        return $this->pageName;
    }

    // probably needs to be private. no set method required. id immediately generated by setName upon construction
    public function getId() {
        return $this->id;
    }

    public function getDisplayName() {
        return $this->displayName;
    }

    public function setDisplayName($displayName) {
        $this->displayName = $displayName;
    }

    public function getFields() {
        return $this->fields;
    }

    public function addField($field) {
        $fieldName = $field->getName();
        $fieldType = $field->getType();
        $fieldDefaultContent = $field->getDefaultContent();

        // Check if the field already exists
        $query = "SELECT sections_id, name, field_type FROM fields
        WHERE sections_id = ? AND name = ? AND field_type = ?";
        
        $statement = $this->database->getConnection()->prepare($query);
        $statement->bind_param("sss", $this->id, $fieldName, $fieldType);
        $statement->execute();
        
        $result = $statement->get_result();

         // If the field does not exist
        if ($result->num_rows <= 0) {
            // Add new field
            $query = "INSERT INTO fields (sections_id, name, field_type, field_default)
                    VALUES (?, ?, ?, ?)";

            $statement = $this->database->getConnection()->prepare($query);
            $statement->bind_param("ssss", $this->id, $fieldName, $fieldType, $fieldDefaultContent);
            $statement->execute();
        }
    }

    public function getContent($name) {
        return $this->getContentByNameType($name, null);
    }

    public function getContentWithType($name, $type) {
        return $this->getContentByNameType($name, $type);
    }

    public static function getSections() {
        $sections = [];
        $query = "SELECT name FROM sections";

        $database = new Database();

        $result = $database->getConnection()->query($query);

        while ($section = $result->fetch_assoc()) {
            $sections[] = new Section($section["name"]); // this is the reason why a Page cannot be used inside the Section constructor
        }

        return $sections;
    }

    private function getContentByNameType($name, $type) {
        $useType = isset($type);

        // Check if content exists
        $query = "SELECT content.content, content.sections_id, content.fields_id,
		        fields.id, fields.sections_id FROM content
                JOIN fields ON content.fields_id = fields.id 
                AND content.sections_id = fields.sections_id
                WHERE content.pages_id = ? AND content.sections_id = ?
                AND fields.name = ?"; // need to check for page id too
        // the JOINS ensure matching content and fields ID, as well as content and sections IDs.
        // the WHERE specifics which ID you're looking for
        if ($useType) {
            $query .= " AND fields.field_type = ?";
        }

        $statement = $this->database->getConnection()->prepare($query);
        if ($useType) {
            $statement->bind_param("iiss", $this->pageId, $this->id, $name, $type);
        } else {
            $statement->bind_param("iis", $this->pageId, $this->id, $name);
        }
        $statement->execute();
        
        $result = $statement->get_result();

         // If the content exists
        if ($result->num_rows > 0) {
            // Get content
            return $result->fetch_assoc()["content"];
        } else { // Content does not exist
            // Check if default content
            $query = "SELECT field_default FROM fields
                    WHERE sections_id = ? AND name = ? ";

            if ($useType) {
                $query .= " AND field_type = ?";
            }

            $statement = $this->database->getConnection()->prepare($query);
            if ($useType) {
                $statement->bind_param("iss", $this->id, $name, $type);
            } else {
                $statement->bind_param("is", $this->id, $name);
            }
            $statement->execute();
            
            $result = $statement->get_result();

            // If the default content exists
            if ($result->num_rows > 0) {
                // Get default content
                return $result->fetch_assoc()["field_default"];
            } else { // Default content does not exist, so the field does not exist
                $typeError = $useType ? " with Type \"{$type}\"" : "";

                return "Field \"{$name}\"{$typeError} was not found
                        in Section \"{$this->name}\"";
            }
        }
    }

}
